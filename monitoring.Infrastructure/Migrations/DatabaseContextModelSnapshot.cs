// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Monitoring.Infrastructure.Persistence;

#nullable disable

namespace Monitoring.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Aggregates.Camera.Entities.CameraCapability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("CameraId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CameraId");

                    b.Property<Guid?>("CameraId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Configuration")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Configuration");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("IsEnabled");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CameraId")
                        .HasDatabaseName("IX_CameraCapabilities_CameraId");

                    b.HasIndex("CameraId1");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_CameraCapabilities_Type");

                    b.ToTable("CameraCapabilities", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Camera.Entities.CameraStream", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("CameraId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CameraId");

                    b.Property<Guid?>("CameraId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<int>("Quality")
                        .HasColumnType("int")
                        .HasColumnName("Quality");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Url");

                    b.HasKey("Id");

                    b.HasIndex("CameraId")
                        .HasDatabaseName("IX_CameraStreams_CameraId");

                    b.HasIndex("CameraId1");

                    b.HasIndex("Quality")
                        .HasDatabaseName("IX_CameraStreams_Quality");

                    b.ToTable("CameraStreams", (string)null);
                });

            modelBuilder.Entity("Monitoring.Domain.Aggregates.Camera.Camera", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastActiveAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastActiveAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Cameras_Name");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Cameras_Status");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Cameras_Type");

                    b.ToTable("Cameras", (string)null);
                });

            modelBuilder.Entity("Monitoring.Domain.Aggregates.Camera.Entities.CameraConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("AdditionalSettings")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AdditionalSettings");

                    b.Property<string>("AudioCodec")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AudioCodec");

                    b.Property<bool>("AudioEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("AudioEnabled");

                    b.Property<int>("Bitrate")
                        .HasColumnType("int")
                        .HasColumnName("Bitrate");

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Brand");

                    b.Property<Guid>("CameraId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CameraId");

                    b.Property<Guid?>("CameraId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FrameRate")
                        .HasColumnType("int")
                        .HasColumnName("FrameRate");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Resolution");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoCodec")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VideoCodec");

                    b.HasKey("Id");

                    b.HasIndex("CameraId")
                        .IsUnique()
                        .HasDatabaseName("IX_CameraConfigurations_CameraId");

                    b.HasIndex("CameraId1")
                        .IsUnique()
                        .HasFilter("[CameraId1] IS NOT NULL");

                    b.HasIndex("Resolution")
                        .HasDatabaseName("IX_CameraConfigurations_Resolution");

                    b.ToTable("CameraConfigurations", (string)null);
                });

            modelBuilder.Entity("Monitoring.Domain.Aggregates.Page.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("System");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("System");

                    b.HasKey("Id");

                    b.ToTable("Pages", (string)null);
                });

            modelBuilder.Entity("Monitoring.Domain.Aggregates.Tools.Tool", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultAssets")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultJs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("Domain.Aggregates.Camera.Entities.CameraCapability", b =>
                {
                    b.HasOne("Monitoring.Domain.Aggregates.Camera.Camera", null)
                        .WithMany()
                        .HasForeignKey("CameraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monitoring.Domain.Aggregates.Camera.Camera", null)
                        .WithMany("Capabilities")
                        .HasForeignKey("CameraId1");
                });

            modelBuilder.Entity("Domain.Aggregates.Camera.Entities.CameraStream", b =>
                {
                    b.HasOne("Monitoring.Domain.Aggregates.Camera.Camera", null)
                        .WithMany()
                        .HasForeignKey("CameraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monitoring.Domain.Aggregates.Camera.Camera", null)
                        .WithMany("Streams")
                        .HasForeignKey("CameraId1");
                });

            modelBuilder.Entity("Monitoring.Domain.Aggregates.Camera.Camera", b =>
                {
                    b.OwnsOne("Domain.Aggregates.Camera.ValueObjects.CameraLocation", "Location", b1 =>
                        {
                            b1.Property<Guid>("CameraId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double?>("Latitude")
                                .HasPrecision(10, 8)
                                .HasColumnType("float(10)")
                                .HasColumnName("Location_Latitude");

                            b1.Property<double?>("Longitude")
                                .HasPrecision(11, 8)
                                .HasColumnType("float(11)")
                                .HasColumnName("Location_Longitude");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("Location_Value");

                            b1.Property<string>("Zone")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Location_Zone");

                            b1.HasKey("CameraId");

                            b1.ToTable("Cameras");

                            b1.WithOwner()
                                .HasForeignKey("CameraId");
                        });

                    b.OwnsOne("Domain.Aggregates.Camera.ValueObjects.CameraNetwork", "Network", b1 =>
                        {
                            b1.Property<Guid>("CameraId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("IpAddress")
                                .IsRequired()
                                .HasMaxLength(45)
                                .HasColumnType("nvarchar(45)")
                                .HasColumnName("Network_IpAddress");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("Network_Password");

                            b1.Property<int>("Port")
                                .HasColumnType("int")
                                .HasColumnName("Network_Port");

                            b1.Property<int>("Type")
                                .HasColumnType("int")
                                .HasColumnName("Network_Type");

                            b1.Property<string>("Username")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Network_Username");

                            b1.HasKey("CameraId");

                            b1.ToTable("Cameras");

                            b1.WithOwner()
                                .HasForeignKey("CameraId");
                        });

                    b.OwnsOne("Monitoring.Domain.Aggregates.Camera.ValueObjects.CameraConnectionInfo", "ConnectionInfo", b1 =>
                        {
                            b1.Property<Guid>("CameraId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AdditionalInfo")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Connection_AdditionalInfo");

                            b1.Property<string>("BackupStreamUrl")
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasColumnName("Connection_BackupStreamUrl");

                            b1.Property<DateTime>("ConnectedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("Connection_ConnectedAt");

                            b1.Property<string>("ConnectionType")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Connection_Type");

                            b1.Property<bool>("IsConnected")
                                .HasColumnType("bit")
                                .HasColumnName("Connection_IsConnected");

                            b1.Property<DateTime?>("LastHeartbeat")
                                .HasColumnType("datetime2")
                                .HasColumnName("Connection_LastHeartbeat");

                            b1.Property<string>("SnapshotUrl")
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasColumnName("Connection_SnapshotUrl");

                            b1.Property<string>("StreamUrl")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasColumnName("Connection_StreamUrl");

                            b1.HasKey("CameraId");

                            b1.ToTable("Cameras");

                            b1.WithOwner()
                                .HasForeignKey("CameraId");
                        });

                    b.Navigation("ConnectionInfo")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("Network")
                        .IsRequired();
                });

            modelBuilder.Entity("Monitoring.Domain.Aggregates.Camera.Entities.CameraConfiguration", b =>
                {
                    b.HasOne("Monitoring.Domain.Aggregates.Camera.Camera", null)
                        .WithOne()
                        .HasForeignKey("Monitoring.Domain.Aggregates.Camera.Entities.CameraConfiguration", "CameraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monitoring.Domain.Aggregates.Camera.Camera", null)
                        .WithOne("Configuration")
                        .HasForeignKey("Monitoring.Domain.Aggregates.Camera.Entities.CameraConfiguration", "CameraId1");

                    b.OwnsOne("Monitoring.Domain.Aggregates.Camera.ValueObjects.MotionDetectionSettings", "MotionDetection", b1 =>
                        {
                            b1.Property<Guid>("CameraConfigurationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("DetectionZone")
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasColumnName("MotionDetection_Zone");

                            b1.Property<bool>("IsEnabled")
                                .HasColumnType("bit")
                                .HasColumnName("MotionDetection_IsEnabled");

                            b1.Property<int>("Sensitivity")
                                .HasColumnType("int")
                                .HasColumnName("MotionDetection_Sensitivity");

                            b1.HasKey("CameraConfigurationId");

                            b1.ToTable("CameraConfigurations");

                            b1.WithOwner()
                                .HasForeignKey("CameraConfigurationId");
                        });

                    b.OwnsOne("Monitoring.Domain.Aggregates.Camera.ValueObjects.RecordingSettings", "Recording", b1 =>
                        {
                            b1.Property<Guid>("CameraConfigurationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Duration")
                                .HasColumnType("float")
                                .HasColumnName("Recording_Duration");

                            b1.Property<bool>("IsEnabled")
                                .HasColumnType("bit")
                                .HasColumnName("Recording_IsEnabled");

                            b1.Property<int>("Quality")
                                .HasColumnType("int")
                                .HasColumnName("Recording_Quality");

                            b1.Property<string>("StoragePath")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("Recording_StoragePath");

                            b1.HasKey("CameraConfigurationId");

                            b1.ToTable("CameraConfigurations");

                            b1.WithOwner()
                                .HasForeignKey("CameraConfigurationId");
                        });

                    b.Navigation("MotionDetection")
                        .IsRequired();

                    b.Navigation("Recording")
                        .IsRequired();
                });

            modelBuilder.Entity("Monitoring.Domain.Aggregates.Page.Page", b =>
                {
                    b.OwnsMany("Domain.Aggregates.Page.ValueObjects.BaseElement", "Elements", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Order")
                                .HasColumnType("int");

                            b1.Property<Guid>("PageId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<byte[]>("RowVersion")
                                .IsRequired()
                                .HasColumnType("varbinary(max)");

                            b1.Property<Guid>("ToolId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("PageId");

                            b1.ToTable("BaseElement");

                            b1.WithOwner()
                                .HasForeignKey("PageId");

                            b1.OwnsOne("Domain.SharedKernel.Asset", "Asset", b2 =>
                                {
                                    b2.Property<Guid>("BaseElementId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("AltText")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Content")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Metadata")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Type")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Url")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("BaseElementId");

                                    b2.ToTable("BaseElement");

                                    b2.WithOwner()
                                        .HasForeignKey("BaseElementId");
                                });

                            b1.OwnsOne("Domain.Aggregates.Page.ValueObjects.TemplateBody", "TemplateBody", b2 =>
                                {
                                    b2.Property<Guid>("BaseElementId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("CustomCss")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CustomJs")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("DefaultCssClasses")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("HtmlTemplate")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<bool>("IsFloating")
                                        .HasColumnType("bit");

                                    b2.HasKey("BaseElementId");

                                    b2.ToTable("BaseElement");

                                    b2.WithOwner()
                                        .HasForeignKey("BaseElementId");
                                });

                            b1.Navigation("Asset")
                                .IsRequired();

                            b1.Navigation("TemplateBody")
                                .IsRequired();
                        });

                    b.OwnsOne("Domain.Aggregates.Page.ValueObjects.DisplayConfiguration", "DisplayConfig", b1 =>
                        {
                            b1.Property<Guid>("PageId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Height")
                                .HasColumnType("int")
                                .HasColumnName("DisplayHeight");

                            b1.Property<string>("ThumbnailUrl")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("ThumbnailUrl");

                            b1.Property<int>("Width")
                                .HasColumnType("int")
                                .HasColumnName("DisplayWidth");

                            b1.HasKey("PageId");

                            b1.ToTable("Pages");

                            b1.WithOwner()
                                .HasForeignKey("PageId");

                            b1.OwnsOne("Domain.Aggregates.Page.ValueObjects.DisplayOrientation", "Orientation", b2 =>
                                {
                                    b2.Property<Guid>("DisplayConfigurationPageId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("DisplayOrientationName");

                                    b2.Property<int>("Value")
                                        .HasColumnType("int")
                                        .HasColumnName("DisplayOrientation");

                                    b2.HasKey("DisplayConfigurationPageId");

                                    b2.ToTable("Pages");

                                    b2.WithOwner()
                                        .HasForeignKey("DisplayConfigurationPageId");
                                });

                            b1.Navigation("Orientation")
                                .IsRequired();
                        });

                    b.OwnsOne("Domain.Aggregates.Page.ValueObjects.PageStatus", "Status", b1 =>
                        {
                            b1.Property<Guid>("PageId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("StatusName");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("Status");

                            b1.HasKey("PageId");

                            b1.ToTable("Pages");

                            b1.WithOwner()
                                .HasForeignKey("PageId");
                        });

                    b.OwnsOne("Domain.SharedKernel.Asset", "BackgroundAsset", b1 =>
                        {
                            b1.Property<Guid>("PageId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AltText")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("BackgroundAssetAltText");

                            b1.Property<string>("Content")
                                .HasColumnType("TEXT")
                                .HasColumnName("BackgroundAssetContent");

                            b1.Property<string>("Metadata")
                                .HasColumnType("TEXT")
                                .HasColumnName("BackgroundAssetMetadata");

                            b1.Property<string>("Type")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("BackgroundAssetType");

                            b1.Property<string>("Url")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("BackgroundAssetUrl");

                            b1.HasKey("PageId");

                            b1.ToTable("Pages");

                            b1.WithOwner()
                                .HasForeignKey("PageId");
                        });

                    b.Navigation("BackgroundAsset")
                        .IsRequired();

                    b.Navigation("DisplayConfig")
                        .IsRequired();

                    b.Navigation("Elements");

                    b.Navigation("Status")
                        .IsRequired();
                });

            modelBuilder.Entity("Monitoring.Domain.Aggregates.Tools.Tool", b =>
                {
                    b.OwnsMany("Domain.Aggregates.Tools.ValueObjects.Template", "Templates", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("DefaultCss")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DefaultCssClasses")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("HtmlStructure")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("ToolId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("ToolId");

                            b1.ToTable("Template");

                            b1.WithOwner()
                                .HasForeignKey("ToolId");
                        });

                    b.Navigation("Templates");
                });

            modelBuilder.Entity("Monitoring.Domain.Aggregates.Camera.Camera", b =>
                {
                    b.Navigation("Capabilities");

                    b.Navigation("Configuration")
                        .IsRequired();

                    b.Navigation("Streams");
                });
#pragma warning restore 612, 618
        }
    }
}
