@model Monitoring.Ui.Models.Page.EditPageViewModel

<!-- Elements List -->
<div class="elements-container">
    <div class="elements-search">
        <div class="input-group mb-3">
            <span class="input-group-text">
                <i class="fas fa-search"></i>
            </span>
            <input type="text" class="form-control" id="search-elements" placeholder="جستجو در المنت‌ها...">
        </div>
    </div>

    <div class="elements-categories mb-3">
        <div class="category-filter">
            <button class="btn btn-outline-primary btn-sm active" data-category="all">
                <i class="fas fa-layer-group me-1"></i>
                همه
            </button>
            <button class="btn btn-outline-primary btn-sm" data-category="basic">
                <i class="fas fa-cube me-1"></i>
                پایه
            </button>
            <button class="btn btn-outline-primary btn-sm" data-category="media">
                <i class="fas fa-photo-video me-1"></i>
                رسانه
            </button>
            <button class="btn btn-outline-primary btn-sm" data-category="text">
                <i class="fas fa-font me-1"></i>
                متن
            </button>
        </div>
    </div>

    <div class="elements-list" id="elements-list">
        @if (Model.AvailableTools != null && Model.AvailableTools.Any())
        {
            @foreach (var tool in Model.AvailableTools)
            {
                <div class="element-item" 
                     data-element-type="@tool.ElementType" 
                     data-element-id="@tool.Id"
                     data-element-name="@tool.Name.ToLower()"
                     draggable="true">
                    <div class="element-icon">
                        <i class="@GetElementIcon(tool.ElementType)"></i>
                    </div>
                    <div class="element-info">
                        <div class="element-name">@tool.Name</div>
                        <div class="element-type">@GetElementTypeDisplay(tool.ElementType)</div>
                    </div>
                    <div class="element-preview" title="پیش‌نمایش">
                        <i class="fas fa-eye"></i>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="no-elements text-center py-4">
                <i class="fas fa-box-open fa-2x text-muted mb-3"></i>
                <div class="text-muted">هیچ المنتی یافت نشد</div>
            </div>
        }
    </div>
</div>

@{
    string GetElementIcon(string elementType)
    {
        var icons = new Dictionary<string, string>
        {
            {"text", "fas fa-font"},
            {"header", "fas fa-heading"},
            {"image", "fas fa-image"},
            {"video", "fas fa-video"},
            {"audio", "fas fa-volume-up"},
            {"button", "fas fa-hand-pointer"},
            {"link", "fas fa-link"},
            {"container", "fas fa-square"},
            {"divider", "fas fa-minus"},
            {"chart", "fas fa-chart-bar"},
            {"table", "fas fa-table"},
            {"input", "fas fa-keyboard"},
            {"textarea", "fas fa-align-left"},
            {"select", "fas fa-list"},
            {"counter", "fas fa-sort-numeric-up"},
            {"clock", "fas fa-clock"},
            {"weather", "fas fa-cloud-sun"},
            {"calendar", "fas fa-calendar"},
            {"countdown", "fas fa-stopwatch"},
            {"webpage", "fas fa-globe"},
            {"gif", "fas fa-file-image"},
            {"flowing_text", "fas fa-scroll"},
            {"day_counter", "fas fa-calendar-day"},
            {"digital_clock", "fas fa-digital-tachograph"},
            {"tv", "fas fa-tv"}
        };
        return icons.ContainsKey(elementType) ? icons[elementType] : "fas fa-cube";
    }

    string GetElementTypeDisplay(string elementType)
    {
        var displays = new Dictionary<string, string>
        {
            {"text", "متن"},
            {"header", "عنوان"},
            {"image", "تصویر"},
            {"video", "ویدیو"},
            {"audio", "صدا"},
            {"button", "دکمه"},
            {"link", "لینک"},
            {"container", "کانتینر"},
            {"divider", "جداکننده"},
            {"chart", "نمودار"},
            {"table", "جدول"},
            {"input", "ورودی متن"},
            {"textarea", "ناحیه متن"},
            {"select", "انتخابگر"},
            {"counter", "شمارنده"},
            {"clock", "ساعت"},
            {"weather", "آب و هوا"},
            {"calendar", "تقویم"},
            {"countdown", "شمارش معکوس"},
            {"webpage", "صفحه وب"},
            {"gif", "تصویر متحرک"},
            {"flowing_text", "متن جاری"},
            {"day_counter", "شمارنده روز"},
            {"digital_clock", "ساعت دیجیتال"},
            {"tv", "تلویزیون"}
        };
        return displays.ContainsKey(elementType) ? displays[elementType] : elementType;
    }
}

<script>
// Load elements when page loads
document.addEventListener('DOMContentLoaded', function() {
    // Setup search
    const searchInput = document.getElementById('search-elements');
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            filterElements(this.value);
        });
    }
    
    // Setup category filters
    const categoryButtons = document.querySelectorAll('[data-category]');
    categoryButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Update active state
            categoryButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            // Filter elements
            filterElementsByCategory(this.dataset.category);
        });
    });
    
    // Setup drag and drop for existing elements
    setupElementDragAndDrop();
});

function filterElements(searchTerm) {
    const elements = document.querySelectorAll('.element-item');
    searchTerm = searchTerm.toLowerCase().trim();
    
    elements.forEach(element => {
        const name = element.dataset.elementName;
        const type = element.dataset.elementType;
        const typeDisplay = element.querySelector('.element-type').textContent.toLowerCase();
        
        const matches = name.includes(searchTerm) || 
                       type.includes(searchTerm) || 
                       typeDisplay.includes(searchTerm);
        
        element.style.display = matches ? 'flex' : 'none';
    });
}

function filterElementsByCategory(category) {
    const elements = document.querySelectorAll('.element-item');
    
    const categories = {
        'basic': ['text', 'header', 'button', 'link', 'container', 'divider'],
        'media': ['image', 'video', 'audio', 'gif', 'tv'],
        'text': ['text', 'header', 'flowing_text'],
        'all': []
    };
    
    elements.forEach(element => {
        const elementType = element.dataset.elementType;
        const shouldShow = category === 'all' || categories[category]?.includes(elementType);
        element.style.display = shouldShow ? 'flex' : 'none';
    });
}

function setupElementDragAndDrop() {
    const elements = document.querySelectorAll('.element-item');
    
    elements.forEach(element => {
        element.addEventListener('dragstart', function(e) {
            e.dataTransfer.setData('text/plain', JSON.stringify({
                elementId: this.dataset.elementId,
                elementType: this.dataset.elementType
            }));
            
            // Add visual feedback
            this.style.opacity = '0.5';
        });
        
        element.addEventListener('dragend', function(e) {
            this.style.opacity = '1';
        });
    });
}
</script>


