@using App.Areas.Admin.Controllers
 @model ExportHistoryViewModel
@{
    Layout = "/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = $"Export History - {Model.Template.Name}";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Export History: @Model.Template.Name</h2>
        <div>
            <a asp-action="Edit" asp-route-id="@Model.Template.Id" class="btn btn-info">
                <i class="fas fa-edit"></i> Edit Template
            </a>
            <a asp-action="Index" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to List
            </a>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Format</th>
                            <th>Date Range</th>
                            <th>Status</th>
                            <th>File Size</th>
                            <th>Generated By</th>
                            <th>Email Status</th>
                            <th>Details</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var export in Model.History)
                        {
                            <tr>
                                <td>@export.ExportedAt.ToString("g")</td>
                                <td>@export.Format</td>
                                <td>
                                    <small>
                                        From: @export.StartDate.ToString("d")<br>
                                        To: @export.EndDate.ToString("d")
                                    </small>
                                </td>
                                <td>
                                    <span class="badge @(export.Status == "Success" ? "bg-success" : "bg-danger")">
                                        @export.Status
                                    </span>
                                </td>
                                <td>@FormatFileSize(export.FileSizeBytes)</td>
                                <td>@export.GeneratedBy</td>
                                <td>
                                    @if (export.WasScheduled)
                                    {
                                        if (export.EmailSent)
                                        {
                                            <span class="badge bg-success">Sent</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning">Failed</span>
                                        }
                                        <small class="d-block text-muted">@export.EmailRecipients</small>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">N/A</span>
                                    }
                                </td>
                                <td>
                                    @if (export.Status != "Success")
                                    {
                                        <button type="button" class="btn btn-sm btn-link text-danger" 
                                                data-bs-toggle="tooltip" 
                                                data-bs-placement="left" 
                                                title="@export.ErrorMessage">
                                            <i class="fas fa-exclamation-circle"></i> Error Details
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@functions {
    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;
        
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }

        return $"{size:0.##} {sizes[order]}";
    }
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>
}