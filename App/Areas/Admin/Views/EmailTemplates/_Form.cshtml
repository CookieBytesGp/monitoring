@using App.Models
 @model EmailTemplate

<div class="row">
    <div class="col-md-8">
        <div class="form-group mb-3">
            <label asp-for="Name" class="form-label">Template Name</label>
            <input asp-for="Name" class="form-control" />
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Subject" class="form-label">Email Subject</label>
            <input asp-for="Subject" class="form-control" />
            <span asp-validation-for="Subject" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Description" class="form-label">Description</label>
            <textarea asp-for="Description" class="form-control" rows="2"></textarea>
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Body" class="form-label">Email Body</label>
            <textarea asp-for="Body" id="emailBody" class="form-control" rows="15"></textarea>
            <span asp-validation-for="Body" class="text-danger"></span>
        </div>

        <div class="form-check mb-3">
            <input asp-for="IsDefault" class="form-check-input" />
            <label asp-for="IsDefault" class="form-check-label">Set as Default Template</label>
        </div>
    </div>

    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Available Placeholders</h5>
            </div>
            <div class="card-body">
                <p class="card-text">Click to copy to clipboard:</p>
                <div class="list-group">
                    @foreach (var placeholder in ViewBag.Placeholders)
                    {
                        <button type="button" class="list-group-item list-group-item-action"
                                onclick="copyPlaceholder('@placeholder')">
                            @placeholder
                        </button>
                    }
                </div>
            </div>
            <div class="card-footer">
                <small class="text-muted">
                    These placeholders will be replaced with actual values when the email is sent.
                </small>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.tiny.cloud/1/no-api-key/tinymce/6/tinymce.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            try {
                tinymce.init({
                    selector: '#emailBody',
                    height: 500,
                    plugins: [
                        'advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview',
                        'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',
                        'insertdatetime', 'media', 'table', 'help', 'wordcount'
                    ],
                    toolbar: 'undo redo | blocks | ' +
                        'bold italic backcolor | alignleft aligncenter ' +
                        'alignright alignjustify | bullist numlist outdent indent | ' +
                        'removeformat | help',
                    content_style: 'body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial; font-size: 14px; }',
                    setup: function(editor) {
                        editor.on('init', function() {
                            console.log('Editor initialized successfully');
                        });
                    }
                });
            } catch (e) {
                console.error('Error initializing TinyMCE:', e);
            }
        });

        function copyPlaceholder(placeholder) {
            try {
                var editor = tinymce.get('emailBody');
                if (editor) {
                    editor.execCommand('mceInsertContent', false, placeholder);
                    showToast('Placeholder inserted');
                } else {
                    console.error('TinyMCE editor not found');
                    showToast('Error inserting placeholder');
                }
            } catch (e) {
                console.error('Error copying placeholder:', e);
                showToast('Error inserting placeholder');
            }
        }

        function showToast(message) {
            // Create a bootstrap toast notification
            const toastContainer = document.createElement('div');
            toastContainer.style.position = 'fixed';
            toastContainer.style.top = '20px';
            toastContainer.style.right = '20px';
            toastContainer.style.zIndex = '1050';
            
            const toast = document.createElement('div');
            toast.className = 'toast';
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            toast.innerHTML = `
                <div class="toast-header">
                    <strong class="me-auto">Notification</strong>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">${message}</div>
            `;
            
            toastContainer.appendChild(toast);
            document.body.appendChild(toastContainer);
            
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
            
            // Remove the toast container after it's hidden
            toast.addEventListener('hidden.bs.toast', function() {
                document.body.removeChild(toastContainer);
            });
        }
    </script>
}