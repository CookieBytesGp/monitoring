@using App.Models.Camera
 @{
    Layout = "/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Camera Analytics";
    var camera = ViewBag.Camera as CameraDevice;
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2>@camera.Name Analytics</h2>
            <p class="text-muted mb-0">Location: @camera.Location</p>
        </div>
        <div class="btn-group">
            <button class="btn btn-outline-primary" id="refreshData">
                <i class="fas fa-sync"></i> Refresh
            </button>
            <button class="btn btn-outline-secondary" id="exportData">
                <i class="fas fa-download"></i> Export
            </button>
            <a href="@Url.Action("Index")" class="btn btn-outline-dark">
                <i class="fas fa-arrow-left"></i> Back to Dashboard
            </a>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <div class="row align-items-center">
                        <div class="col">
                            <h5 class="mb-0">Time Range Analysis</h5>
                        </div>
                        <div class="col-auto">
                            <div class="input-group">
                                <input type="datetime-local" class="form-control" id="startDate">
                                <div class="input-group-append input-group-prepend">
                                    <span class="input-group-text">to</span>
                                </div>
                                <input type="datetime-local" class="form-control" id="endDate">
                                <div class="input-group-append">
                                    <button class="btn btn-primary" id="applyDateRange">Apply</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <h6 class="card-title">Total Events</h6>
                    <h2 class="mb-0" id="totalEvents">0</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <h6 class="card-title">Average Motion</h6>
                    <h2 class="mb-0" id="averageMotion">0%</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <h6 class="card-title">Peak Motion</h6>
                    <h2 class="mb-0" id="peakMotion">0%</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <h6 class="card-title">Unacknowledged</h6>
                    <h2 class="mb-0" id="unacknowledged">0</h2>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Motion Events Timeline</h5>
                </div>
                <div class="card-body">
                    <canvas id="eventTimeline" height="300"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Events by Hour</h5>
                </div>
                <div class="card-body">
                    <canvas id="hourlyDistribution" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Recent Motion Events</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover" id="eventsTable">
                            <thead>
                                <tr>
                                    <th>Time</th>
                                    <th>Motion %</th>
                                    <th>Image</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
                <div class="card-footer">
                    <button class="btn btn-secondary" id="loadMore">Load More</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Event Image Modal -->
<div class="modal fade" id="imageModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Motion Event Image</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <img src="" class="img-fluid" id="eventImage" alt="Motion Event">
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        $(document).ready(function () {
            const cameraId = '@camera.Id';
            let currentPage = 1;
            const pageSize = 20;

            // Initialize charts
            const timelineChart = new Chart($('#eventTimeline'), {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Motion Events',
                        data: [],
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            const hourlyChart = new Chart($('#hourlyDistribution'), {
                type: 'bar',
                data: {
                    labels: Array.from({length: 24}, (_, i) => i),
                    datasets: [{
                        label: 'Events by Hour',
                        data: [],
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgb(75, 192, 192)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            // Set default date range
            const now = new Date();
            const yesterday = new Date(now);
            yesterday.setDate(yesterday.getDate() - 1);
            
            $('#startDate').val(yesterday.toISOString().slice(0, 16));
            $('#endDate').val(now.toISOString().slice(0, 16));

            function loadAnalytics() {
                const start = new Date($('#startDate').val());
                const end = new Date($('#endDate').val());

                $.get('/Admin/Analytics/GetAnalytics', {
                    cameraId: cameraId,
                    start: start.toISOString(),
                    end: end.toISOString()
                }, function(data) {
                    $('#totalEvents').text(data.totalEvents);
                    $('#averageMotion').text(`${Math.round(data.averageMotionPercentage * 100)}%`);
                    $('#peakMotion').text(`${Math.round(data.peakMotionPercentage * 100)}%`);
                    $('#unacknowledged').text(data.unacknowledgedEvents);

                    // Update hourly distribution
                    hourlyChart.data.datasets[0].data = Object.values(data.eventsByHour);
                    hourlyChart.update();
                });

                // Load timeline data
                $.get('/Admin/Analytics/GetEventsByDay', {
                    cameraId: cameraId,
                    start: start.toISOString(),
                    end: end.toISOString()
                }, function(data) {
                    const labels = [];
                    const counts = [];

                    Object.entries(data).forEach(([date, count]) => {
                        labels.push(new Date(date).toLocaleDateString());
                        counts.push(count);
                    });

                    timelineChart.data.labels = labels;
                    timelineChart.data.datasets[0].data = counts;
                    timelineChart.update();
                });

                loadEvents();
            }

            function loadEvents(append = false) {
                $.get('/Admin/Analytics/GetRecentEvents', {
                    count: pageSize * currentPage
                }, function(events) {
                    const tbody = $('#eventsTable tbody');
                    if (!append) {
                        tbody.empty();
                    }

                    events.forEach(event => {
                        if (event.cameraId === cameraId) {
                            const row = $('<tr></tr>');
                            row.append($('<td></td>').text(new Date(event.timestamp).toLocaleString()));
                            row.append($('<td></td>').text(`${Math.round(event.motionPercentage * 100)}%`));
                            
                            const imageCell = $('<td></td>');
                            if (event.imagePath) {
                                imageCell.html(
                                    `<button class="btn btn-sm btn-info" onclick="showImage('${event.imagePath}')">
                                        View Image
                                    </button>`
                                );
                            } else {
                                imageCell.text('No image');
                            }
                            row.append(imageCell);

                            const statusCell = $('<td></td>');
                            if (event.acknowledged) {
                                statusCell.html('<span class="badge badge-success">Acknowledged</span>');
                            } else {
                                statusCell.html('<span class="badge badge-warning">Pending</span>');
                            }
                            row.append(statusCell);

                            const actionsCell = $('<td></td>');
                            if (!event.acknowledged) {
                                actionsCell.html(
                                    `<button class="btn btn-sm btn-primary" onclick="acknowledgeEvent(${event.id})">
                                        Acknowledge
                                    </button>`
                                );
                            }
                            row.append(actionsCell);

                            tbody.append(row);
                        }
                    });
                });
            }

            // Event handlers
            $('#refreshData').click(loadAnalytics);
            $('#applyDateRange').click(loadAnalytics);
            $('#loadMore').click(function() {
                currentPage++;
                loadEvents(true);
            });

            // Global functions
            window.showImage = function(imagePath) {
                $('#eventImage').attr('src', imagePath);
                $('#imageModal').modal('show');
            };

            window.acknowledgeEvent = function(eventId) {
                $.post('/Admin/Analytics/AcknowledgeEvent', { eventId: eventId })
                    .done(function() {
                        loadAnalytics();
                    })
                    .fail(function() {
                        alert('Failed to acknowledge event');
                    });
            };

            // Initial load
            loadAnalytics();

            // Auto refresh every 5 minutes
            setInterval(loadAnalytics, 300000);
        });
    </script>
}