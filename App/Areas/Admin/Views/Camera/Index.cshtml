 @model IEnumerable<App.Models.Camera.CameraDevice>

@{
    Layout = "/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Cameras";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Cameras</h2>
        <a href="@Url.Action("Create")" class="btn btn-primary">
            <i class="fas fa-plus"></i> Add New Camera
        </a>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Preview</th>
                            <th>Name</th>
                            <th>Location</th>
                            <th>IP Address</th>
                            <th>Status</th>
                            <th>Last Active</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="cameras-list">
                        @foreach (var camera in Model ?? Enumerable.Empty<App.Models.Camera.CameraDevice>())
                        {
                            <tr data-camera-id="@camera.Id">
                                <td>
                                    <div class="camera-preview" style="width: 120px; height: 80px;">
                                        <img src="@Url.Action("Stream", new { id = camera.Id })" 
                                             alt="Camera Preview"
                                             class="img-fluid"
                                             style="object-fit: cover; width: 100%; height: 100%;" />
                                    </div>
                                </td>
                                <td>@camera.Name</td>
                                <td>@camera.Location</td>
                                <td>@camera.IpAddress</td>
                                <td>
                                    <span class="badge bg-@(camera.IsActive ? "success" : "danger")">
                                        @(camera.IsActive ? "Active" : "Inactive")
                                    </span>
                                </td>
                                <td>@camera.LastActive.ToString("g")</td>
                                <td>
                                    <div class="btn-group">
                                        <a href="@Url.Action("Stream", new { id = camera.Id })" 
                                           class="btn btn-sm btn-outline-success">
                                            View
                                        </a>
                                        <a href="@Url.Action("Edit", new { id = camera.Id })" 
                                           class="btn btn-sm btn-outline-primary">
                                            Edit
                                        </a>
                                        <button type="button" 
                                                class="btn btn-sm btn-outline-danger"
                                                onclick="deleteCamera(@camera.Id)">
                                            Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function deleteCamera(id) {
            if (confirm('Are you sure you want to delete this camera?')) {
                fetch(`/Admin/Camera/Delete/${id}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => {
                    if (response.ok) {
                        document.querySelector(`tr[data-camera-id="${id}"]`).remove();
                    } else {
                        alert('Failed to delete camera');
                    }
                });
            }
        }

        // Real-time status updates
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/cameraHub")
            .build();

        connection.on("UpdateCameraStatus", (cameraId, isActive) => {
            const row = document.querySelector(`tr[data-camera-id="${cameraId}"]`);
            if (row) {
                const statusBadge = row.querySelector(".badge");
                statusBadge.className = `badge bg-${isActive ? "success" : "danger"}`;
                statusBadge.textContent = isActive ? "Active" : "Inactive";
            }
        });

        connection.start();
    </script>
}