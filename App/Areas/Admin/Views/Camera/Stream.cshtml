 @model App.Models.Camera.CameraDevice

@{
    Layout = "/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = $"Camera Stream - {Model.Name}";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="card-title">@Model.Name - Live Stream</h3>
                    <div>
                        <span class="badge bg-@(Model.IsActive ? "success" : "danger")" id="status-badge">
                            @(Model.IsActive ? "Active" : "Inactive")
                        </span>
                        <a href="@Url.Action("Index")" class="btn btn-outline-secondary ms-2">Back to List</a>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-9">
                            <!-- Main Stream View -->
                            <div class="stream-container" style="aspect-ratio: 16/9; background: #000;">
                                <video id="camera-stream" 
                                       class="w-100 h-100" 
                                       autoplay 
                                       muted 
                                       style="object-fit: contain;">
                                </video>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <!-- Camera Details -->
                            <div class="camera-info">
                                <h4>Camera Details</h4>
                                <dl class="row">
                                    <dt class="col-sm-4">Location</dt>
                                    <dd class="col-sm-8">@Model.Location</dd>

                                    <dt class="col-sm-4">IP Address</dt>
                                    <dd class="col-sm-8">@Model.IpAddress</dd>

                                    <dt class="col-sm-4">Resolution</dt>
                                    <dd class="col-sm-8">@Model.Resolution</dd>

                                    <dt class="col-sm-4">Last Active</dt>
                                    <dd class="col-sm-8" id="last-active">@Model.LastActive.ToString("g")</dd>
                                </dl>
                            </div>

                            <!-- Stream Controls -->
                            <div class="stream-controls mt-3">
                                <button class="btn btn-primary w-100 mb-2" id="refresh-stream">
                                    Refresh Stream
                                </button>
                                <button class="btn btn-outline-primary w-100" id="toggle-fullscreen">
                                    Toggle Fullscreen
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Stream handling
        const videoElement = document.getElementById('camera-stream');
        const streamUrl = `/Admin/Camera/StreamFeed/@Model.Id`;
        
        function initializeStream() {
            if (Hls.isSupported()) {
                const hls = new Hls();
                hls.loadSource(streamUrl);
                hls.attachMedia(videoElement);
            }
            else if (videoElement.canPlayType('application/vnd.apple.mpegurl')) {
                videoElement.src = streamUrl;
            }
        }

        // Fullscreen handling
        document.getElementById('toggle-fullscreen').addEventListener('click', () => {
            if (!document.fullscreenElement) {
                videoElement.requestFullscreen();
            } else {
                document.exitFullscreen();
            }
        });

        // Refresh stream
        document.getElementById('refresh-stream').addEventListener('click', () => {
            initializeStream();
        });

        // Initialize
        initializeStream();

        // Real-time status updates
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/cameraHub")
            .build();

        connection.on("UpdateCameraStatus", (cameraId, isActive) => {
            if (cameraId === @Model.Id) {
                const statusBadge = document.getElementById('status-badge');
                statusBadge.className = `badge bg-${isActive ? "success" : "danger"}`;
                statusBadge.textContent = isActive ? "Active" : "Inactive";
            }
        });

        connection.start();
    </script>
}