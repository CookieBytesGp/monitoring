@model List<DTOs.Pagebuilder.ToolDTO>
@{
    // Retrieve the current page ID from ViewData
    var pageId = ViewData["PageId"]?.ToString() ?? "";
}
<div class="sidebar">
    <h1>Side Bar</h1>

    <!-- Tools Section -->
    <div id="toolsSection" class="sidebar-section">
        <h2>Tools</h2>
        <ul>
            @foreach (var tool in Model)
            {
                <li>
                    <button class="tool-button" onclick="addTool('@tool.Id', '@tool.Name')">
                        @tool.Name
                    </button>
                </li>
            }
        </ul>
    </div>

    <!-- Settings Section -->
    <div id="settingsSection" class="sidebar-section" style="display: none;">
        <h2>Settings</h2>
        <ul>
            <li>Setting 1</li>
            <li>Setting 2</li>
            <li>Setting 3</li>
        </ul>
    </div>

    <!-- Toggle Buttons -->
    <div class="sidebar-buttons">
        <button onclick="showSection('tools')">Show Tools</button>
        <button onclick="showSection('settings')">Show Settings</button>
    </div>
</div>

<script>
    // Set the current page ID from the ViewData; ensure this value is set in the parent view.
    var currentPageId = '@pageId';

    // Function to toggle the visibility between the tools and settings sections.
    function showSection(section) {
        const toolsSection = document.getElementById('toolsSection');
        const settingsSection = document.getElementById('settingsSection');

        if (section === 'tools') {
            toolsSection.style.display = 'block';
            settingsSection.style.display = 'none';
        } else if (section === 'settings') {
            toolsSection.style.display = 'none';
            settingsSection.style.display = 'block';
        }
    }

    // Function to send a tool to the server for transformation,
    // sending a composite payload that includes the current page ID and the tool details.
    function addTool(toolId, toolName) {
        const payload = {
            pageId: currentPageId,
            tool: {
                id: toolId,
                name: toolName
            }
        };

        fetch('/PageEditor/AddToolToEditor', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to add tool to editor');
                }
                return response.json();
            })
            .then(data => {
                console.log("Tool added successfully:", data);
                location.reload(); // Reload the page to update the EditorMain component
            })
            .catch(error => console.error("Error:", error));
    }
</script>
