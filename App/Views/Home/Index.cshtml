@model App.Models.ViewModels.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<div class="container-fluid monitoring-dashboard">
    <!-- Header -->
    <h1 class="mt-4">Monitoring Dashboard</h1>
    <div class="overview-section">
        <p>overview</p>
    </div>

    <!-- Stats Cards -->
    <div class="row">
        <div class="col-xl-3 col-md-6">
            <div class="stat-card">
                <div class="stat-card-header">
                    <h3>Active Cameras</h3>
                    <i class="fas fa-video"></i>
                </div>
                <div class="stat-value">@Model.ActiveCameras</div>
                <div class="stat-footer">
                    <span>Total Cameras: @Model.TotalCameras</span>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="stat-card">
                <div class="stat-card-header">
                    <h3>Today's Events</h3>
                    <i class="fas fa-calendar-day"></i>
                </div>
                <div class="stat-value">@Model.TodayEvents</div>
                <div class="stat-footer">
                    <span>Yesterday: @Model.YesterdayEvents</span>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="stat-card">
                <div class="stat-card-header">
                    <h3>Unacknowledged</h3>
                    <i class="fas fa-exclamation-circle"></i>
                </div>
                <div class="stat-value">@Model.UnacknowledgedEvents</div>
                <div class="stat-footer">
                    <a href="#">view Details</a>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="stat-card">
                <div class="stat-card-header">
                    <h3>System Health</h3>
                    <i class="fas fa-heartbeat"></i>
                </div>
                <div class="stat-value">@(Model.SystemHealth.LastError == null ? "Good" : "Warning")</div>
                <div class="stat-footer">
                    <a href="#">view Details</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Row -->
    <div class="row">
        <div class="col-xl-6">
            <div class="chart-container">
                <h3>Hourly Event Distribution</h3>
                <div class="chart-body">
                    <canvas id="hourlyEventsChart" width="100%" height="40"></canvas>
                </div>
            </div>
        </div>
        <div class="col-xl-6">
            <div class="table-container">
                <h3>Active Cameras</h3>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                                <tr>
                                    <th>Camera</th>
                                    <th>Location</th>
                                    <th>Last Active</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var camera in Model.ActiveCamerasList)
                                {
                                    <tr>
                                        <td>@camera.Name</td>
                                        <td>@camera.Location</td>
                                        <td>@camera.LastActive.ToString("g")</td>
                                        <td>
                                            <a href="#" class="btn btn-sm btn-primary" onclick="viewStream('@camera.StreamUrl')">
                                                <i class="fas fa-play"></i>
                                            </a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Events and System Health -->
    <div class="row">
        <div class="col-xl-6">
            <div class="table-container">
                <h3>Recent Events</h3>
                <div class="table-body">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Time</th>
                                    <th>Camera</th>
                                    <th>Motion%</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var evt in Model.RecentEvents)
                                {
                                    <tr>
                                        <td>@evt.Timestamp.ToString("g")</td>
                                        <td>@evt.CameraName</td>
                                        <td>@evt.MotionPercentage.ToString("F1")%</td>
                                        <td>
                                            @if (evt.IsAcknowledged)
                                            {
                                                <span class="status-acknowledged">Acknowledged</span>
                                            }
                                            else
                                            {
                                                <span class="status-pending">Pending</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-6">
            <div class="alerts-container">
                <h3>System Alerts</h3>
                <div class="alerts-body" id="systemAlerts">
                    @if (Model.SystemHealth.LastError != null)
                    {
                        <div class="alert alert-danger">
                            <h5>Last Error</h5>
                            <p>@Model.SystemHealth.LastError.Message</p>
                            <small>@Model.SystemHealth.LastError.Timestamp.ToString("g")</small>
                        </div>
                    }
                    <div class="list-group">
                        @foreach (var alert in Model.SystemHealth.RecentAlerts)
                        {
                            <div class="list-group-item">
                                <div class="d-flex w-100 justify-content-between">
                                    <h6 class="mb-1">@alert.Message</h6>
                                    <small>@alert.Timestamp.ToString("g")</small>
                                </div>
                                <small class="text-@(alert.Severity == "Error" ? "danger" : "warning")">
                                    @alert.Severity
                                </small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="~/js/dashboard.js" asp-append-version="true"></script>
    <script>
        // Initialize hourly events chart
        const ctx = document.getElementById('hourlyEventsChart');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: Array.from({length: 24}, (_, i) => `${i}:00`),
                datasets: [{
                    label: 'Events',
                    data: @Json.Serialize(Model.HourlyEventDistribution),
                    backgroundColor: 'rgba(76, 175, 80, 0.6)',
                    borderColor: 'rgba(76, 175, 80, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            precision: 0
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });

        // Live updates
        function updateLiveStats() {
            fetch('/Home/GetLiveStats')
                .then(response => response.json())
                .then(data => {
                    // Update dashboard statistics
                    document.querySelector('.stat-card:nth-child(1) .stat-value').innerText = data.activeCameras;
                    document.querySelector('.stat-card:nth-child(2) .stat-value').innerText = data.recentEvents;
                    document.querySelector('.stat-card:nth-child(3) .stat-value').innerText = data.unacknowledgedEvents;
                    
                    // Update system health status if needed
                    const healthValue = document.querySelector('.stat-card:nth-child(4) .stat-value');
                    if (data.systemErrors > 0) {
                        healthValue.innerText = 'Warning';
                        healthValue.classList.add('text-warning');
                    } else {
                        healthValue.innerText = 'Good';
                        healthValue.classList.remove('text-warning');
                    }
                })
                .catch(error => console.error('Error fetching live stats:', error));
        }

        // Update every 30 seconds
        setInterval(updateLiveStats, 30000);

        function viewStream(url) {
            // Implement stream viewer logic in a modal
            const modal = document.createElement('div');
            modal.className = 'stream-modal';
            modal.innerHTML = `
                <div class="stream-modal-content">
                    <span class="close-modal">&times;</span>
                    <h4>Live Stream</h4>
                    <div class="stream-container">
                        <img src="${url}" alt="Camera Stream">
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            
            const closeBtn = modal.querySelector('.close-modal');
            closeBtn.onclick = function() {
                document.body.removeChild(modal);
            }
            
            window.onclick = function(event) {
                if (event.target === modal) {
                    document.body.removeChild(modal);
                }
            }
        }
    </script>
}