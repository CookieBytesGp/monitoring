@model App.Models.ViewModels.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<div class="container-fluid px-4">
    <!-- Header -->
    <h1 class="mt-4">Monitoring Dashboard</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item active">Overview</li>
    </ol>

    <!-- Stats Cards -->
    <div class="row">
        <div class="col-xl-3 col-md-6">
            <div class="card bg-primary text-white mb-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="small">Active Cameras</div>
                            <div class="h3">@Model.ActiveCameras</div>
                        </div>
                        <div class="h1"><i class="fas fa-video"></i></div>
                    </div>
                </div>
                <div class="card-footer d-flex align-items-center justify-content-between">
                    <div class="small">Total Cameras: @Model.TotalCameras</div>
                    <div class="small"><i class="fas fa-angle-right"></i></div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card bg-warning text-white mb-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="small">Today's Events</div>
                            <div class="h3">@Model.TodayEvents</div>
                        </div>
                        <div class="h1"><i class="fas fa-bell"></i></div>
                    </div>
                </div>
                <div class="card-footer d-flex align-items-center justify-content-between">
                    <div class="small">Yesterday: @Model.YesterdayEvents</div>
                    <div class="small"><i class="fas fa-angle-right"></i></div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card bg-danger text-white mb-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="small">Unacknowledged</div>
                            <div class="h3">@Model.UnacknowledgedEvents</div>
                        </div>
                        <div class="h1"><i class="fas fa-exclamation-circle"></i></div>
                    </div>
                </div>
                <div class="card-footer d-flex align-items-center justify-content-between">
                    <a class="small text-white stretched-link" href="#">View Details</a>
                    <div class="small text-white"><i class="fas fa-angle-right"></i></div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card bg-success text-white mb-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="small">System Health</div>
                            <div class="h3">@(Model.SystemHealth.LastError == null ? "Good" : "Warning")</div>
                        </div>
                        <div class="h1"><i class="fas fa-heart"></i></div>
                    </div>
                </div>
                <div class="card-footer d-flex align-items-center justify-content-between">
                    <a class="small text-white stretched-link" href="#">View Details</a>
                    <div class="small text-white"><i class="fas fa-angle-right"></i></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Row -->
    <div class="row">
        <div class="col-xl-6">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-chart-area me-1"></i>
                    Hourly Event Distribution
                </div>
                <div class="card-body">
                    <canvas id="hourlyEventsChart" width="100%" height="40"></canvas>
                </div>
            </div>
        </div>
        <div class="col-xl-6">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-camera me-1"></i>
                    Active Cameras
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Camera</th>
                                    <th>Location</th>
                                    <th>Last Active</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var camera in Model.ActiveCamerasList)
                                {
                                    <tr>
                                        <td>@camera.Name</td>
                                        <td>@camera.Location</td>
                                        <td>@camera.LastActive.ToString("g")</td>
                                        <td>
                                            <a href="#" class="btn btn-sm btn-primary" onclick="viewStream('@camera.StreamUrl')">
                                                <i class="fas fa-play"></i>
                                            </a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Events and System Health -->
    <div class="row">
        <div class="col-xl-6">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-list me-1"></i>
                    Recent Events
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Time</th>
                                    <th>Camera</th>
                                    <th>Motion %</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var evt in Model.RecentEvents)
                                {
                                    <tr>
                                        <td>@evt.Timestamp.ToString("g")</td>
                                        <td>@evt.CameraName</td>
                                        <td>@evt.MotionPercentage.ToString("F1")%</td>
                                        <td>
                                            @if (evt.IsAcknowledged)
                                            {
                                                <span class="badge bg-success">Acknowledged</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-warning">Pending</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-6">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-exclamation-triangle me-1"></i>
                    System Alerts
                </div>
                <div class="card-body">
                    @if (Model.SystemHealth.LastError != null)
                    {
                        <div class="alert alert-danger">
                            <h5>Last Error</h5>
                            <p>@Model.SystemHealth.LastError.Message</p>
                            <small>@Model.SystemHealth.LastError.Timestamp.ToString("g")</small>
                        </div>
                    }
                    <div class="list-group">
                        @foreach (var alert in Model.SystemHealth.RecentAlerts)
                        {
                            <div class="list-group-item">
                                <div class="d-flex w-100 justify-content-between">
                                    <h6 class="mb-1">@alert.Message</h6>
                                    <small>@alert.Timestamp.ToString("g")</small>
                                </div>
                                <small class="text-@(alert.Severity == "Error" ? "danger" : "warning")">
                                    @alert.Severity
                                </small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Initialize hourly events chart
        const ctx = document.getElementById('hourlyEventsChart');
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: Array.from({length: 24}, (_, i) => `${i}:00`),
                datasets: [{
                    label: 'Events',
                    data: @Json.Serialize(Model.HourlyEventDistribution),
                    fill: true,
                    borderColor: 'rgb(75, 192, 192)',
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Live updates
        function updateLiveStats() {
            fetch('/Home/GetLiveStats')
                .then(response => response.json())
                .then(data => {
                    // Update stats here
                });
        }

        // Update every 30 seconds
        setInterval(updateLiveStats, 30000);

        function viewStream(url) {
            // Implement stream viewer logic
            window.open(url, 'StreamViewer', 'width=800,height=600');
        }
    </script>
}