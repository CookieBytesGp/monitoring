// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("Domain.Aggregates.Page.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("Domain.Aggregates.Tools.Tool", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultAssets")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultJs")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ElementType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("Domain.Aggregates.Page.Page", b =>
                {
                    b.OwnsMany("Domain.Aggregates.Page.ValueObjects.BaseElement", "Elements", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Order")
                                .HasColumnType("INTEGER");

                            b1.Property<Guid>("PageId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("ToolId")
                                .HasColumnType("TEXT");

                            b1.HasKey("Id");

                            b1.HasIndex("PageId");

                            b1.ToTable("BaseElement");

                            b1.WithOwner()
                                .HasForeignKey("PageId");

                            b1.OwnsOne("Domain.Aggregates.Page.ValueObjects.TemplateBody", "TemplateBody", b2 =>
                                {
                                    b2.Property<Guid>("BaseElementId")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("CustomCss")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("CustomJs")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("DefaultCssClasses")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("HtmlTemplate")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<bool>("IsFloating")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("BaseElementId");

                                    b2.ToTable("BaseElement");

                                    b2.WithOwner()
                                        .HasForeignKey("BaseElementId");
                                });

                            b1.OwnsOne("Domain.SharedKernel.Domain.SharedKernel.Asset", "Asset", b2 =>
                                {
                                    b2.Property<Guid>("BaseElementId")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("AltText")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Content")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Metadata")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Type")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Url")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.HasKey("BaseElementId");

                                    b2.ToTable("BaseElement");

                                    b2.WithOwner()
                                        .HasForeignKey("BaseElementId");
                                });

                            b1.Navigation("Asset")
                                .IsRequired();

                            b1.Navigation("TemplateBody")
                                .IsRequired();
                        });

                    b.Navigation("Elements");
                });

            modelBuilder.Entity("Domain.Aggregates.Tools.Tool", b =>
                {
                    b.OwnsMany("Domain.Aggregates.Tools.ValueObjects.Template", "Templates", b1 =>
                        {
                            b1.Property<Guid>("ToolId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<string>("DefaultCss")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("DefaultCssClasses")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("HtmlStructure")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("ToolId", "Id");

                            b1.ToTable("Template");

                            b1.WithOwner()
                                .HasForeignKey("ToolId");
                        });

                    b.Navigation("Templates");
                });
#pragma warning restore 612, 618
        }
    }
}
